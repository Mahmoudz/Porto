"use strict";(self.webpackChunkporto=self.webpackChunkporto||[]).push([[887],{1553:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=t(4848),o=t(8453);const s={sidebar_position:7},r="Containers Dependencies",c={id:"Basics/Containers Dependencies",title:"Containers Dependencies",description:"Containers Communication",source:"@site/docs/Basics/Containers Dependencies.md",sourceDirName:"Basics",slug:"/Basics/Containers Dependencies",permalink:"/Porto/docs/Basics/Containers Dependencies",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Basics/Containers Dependencies.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Components Interaction",permalink:"/Porto/docs/Basics/Components Interaction"},next:{title:"Data Flow",permalink:"/Porto/docs/Basics/Data Flow"}},a={},d=[{value:"Containers Communication",id:"containers-communication",level:2}];function l(e){const n={h1:"h1",h2:"h2",li:"li",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"containers-dependencies",children:"Containers Dependencies"}),"\n",(0,i.jsx)(n.h2,{id:"containers-communication",children:"Containers Communication"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.strong,{children:"Container"})," may depend on one or many other Containers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Within a Section:"})," Containers can depend on each other directly as long as they are within the same section."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Between Sections:"})," Use event-driven communication to avoid direct dependencies. This approach aids in future microservices splitting. Consider using message queuing systems like Kafka or RabbitMQ."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Actions-Task Communication:"})," Actions may call tasks from other Containers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model Interaction:"})," Models from different Containers may have relationships."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependency Management:"})," To enhance maintainability, it's recommended to explicitly define dependencies according to your preference. However, automatic dependency injection can be a viable option."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Alternate Communication Methods:"})," Consider any alternative communication method commonly employed in microservices architecture, such as message brokers, RPC (Remote Procedure Call), or RESTful APIs."]}),"\n"]}),"\n",(0,i.jsxs)("div",{style:{display:"flex",justifyContent:"space-between"},children:[(0,i.jsx)("img",{src:"/Porto/img/porto_components_2.png",alt:"Porto Components",style:{width:"20%"}}),(0,i.jsx)("img",{src:"/Porto/img/porto_components_2.png",alt:"Porto Components",style:{width:"20%"}})]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkporto=self.webpackChunkporto||[]).push([[55],{4257:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/Porto/docs/Intro","docId":"Intro","unlisted":false},{"type":"category","label":"Layers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Layers Overview","href":"/Porto/docs/Layers/Layers Overview","docId":"Layers/Layers Overview","unlisted":false},{"type":"link","label":"Containers Layer","href":"/Porto/docs/Layers/Containers Layer","docId":"Layers/Containers Layer","unlisted":false},{"type":"link","label":"Ship Layer","href":"/Porto/docs/Layers/Ship Layer","docId":"Layers/Ship Layer","unlisted":false}],"href":"/Porto/docs/category/layers"},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Components Overview","href":"/Porto/docs/Components/Components Overview","docId":"Components/Components Overview","unlisted":false},{"type":"category","label":"Main Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Routes","href":"/Porto/docs/Components/Main Components Principles/Routes","docId":"Components/Main Components Principles/Routes","unlisted":false},{"type":"link","label":"Requests","href":"/Porto/docs/Components/Main Components Principles/Requests","docId":"Components/Main Components Principles/Requests","unlisted":false},{"type":"link","label":"Controllers","href":"/Porto/docs/Components/Main Components Principles/Controllers","docId":"Components/Main Components Principles/Controllers","unlisted":false},{"type":"link","label":"Actions","href":"/Porto/docs/Components/Main Components Principles/Actions","docId":"Components/Main Components Principles/Actions","unlisted":false},{"type":"link","label":"Tasks","href":"/Porto/docs/Components/Main Components Principles/Tasks","docId":"Components/Main Components Principles/Tasks","unlisted":false},{"type":"link","label":"Models","href":"/Porto/docs/Components/Main Components Principles/Models","docId":"Components/Main Components Principles/Models","unlisted":false},{"type":"link","label":"Views","href":"/Porto/docs/Components/Main Components Principles/Views","docId":"Components/Main Components Principles/Views","unlisted":false},{"type":"link","label":"Transformers","href":"/Porto/docs/Components/Main Components Principles/Transformers","docId":"Components/Main Components Principles/Transformers","unlisted":false},{"type":"link","label":"Exceptions","href":"/Porto/docs/Components/Main Components Principles/Exceptions","docId":"Components/Main Components Principles/Exceptions","unlisted":false},{"type":"link","label":"Sub-Actions","href":"/Porto/docs/Components/Main Components Principles/Sub-Actions","docId":"Components/Main Components Principles/Sub-Actions","unlisted":false}],"href":"/Porto/docs/category/main-components"},{"type":"link","label":"Optional Components","href":"/Porto/docs/Components/Optional Components","docId":"Components/Optional Components","unlisted":false}],"href":"/Porto/docs/category/components"},{"type":"category","label":"Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Components Interaction","href":"/Porto/docs/Basics/Components Interaction","docId":"Basics/Components Interaction","unlisted":false},{"type":"link","label":"Containers Dependencies","href":"/Porto/docs/Basics/Containers Dependencies","docId":"Basics/Containers Dependencies","unlisted":false},{"type":"link","label":"Data Flow","href":"/Porto/docs/Basics/Data Flow","docId":"Basics/Data Flow","unlisted":false}],"href":"/Porto/docs/category/basics"},{"type":"category","label":"Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"AI-Driven Development","href":"/Porto/docs/Features/AI Driven Development","docId":"Features/AI Driven Development","unlisted":false},{"type":"link","label":"Monolithic to Microservices","href":"/Porto/docs/Features/Monolithic to MicroServices","docId":"Features/Monolithic to MicroServices","unlisted":false}],"href":"/Porto/docs/category/features"},{"type":"link","label":"Quality Attributes","href":"/Porto/docs/Quality Attributes","docId":"Quality Attributes","unlisted":false},{"type":"link","label":"Implementations","href":"/Porto/docs/Implementations","docId":"Implementations","unlisted":false},{"type":"link","label":"Feedback","href":"/Porto/docs/Feedback","docId":"Feedback","unlisted":false},{"type":"link","label":"Author","href":"/Porto/docs/Author","docId":"Author","unlisted":false},{"type":"link","label":"Donations","href":"/Porto/docs/Donations","docId":"Donations","unlisted":false}]},"docs":{"Author":{"id":"Author","title":"Author","description":"Mahmoud Zalt","sidebar":"tutorialSidebar"},"Basics/Components Interaction":{"id":"Basics/Components Interaction","title":"Components Interaction","description":"Components in Porto like in many other architectures can interact with each other. However, we should be mindful of the dependencies across containers and especially across sections, if you intend to split into micro-services with ease.","sidebar":"tutorialSidebar"},"Basics/Containers Dependencies":{"id":"Basics/Containers Dependencies","title":"Containers Dependencies","description":"Containers Communication","sidebar":"tutorialSidebar"},"Basics/Data Flow":{"id":"Basics/Data Flow","title":"Data Flow","description":"Data Layer","sidebar":"tutorialSidebar"},"Components/Components Overview":{"id":"Components/Components Overview","title":"Components Overview","description":"In the Container layer, Porto organizes code into Components, which are classes with specific roles and responsibilities. All code you develop is structured within these Components, ensuring that each class function has a clear purpose.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Actions":{"id":"Components/Main Components Principles/Actions","title":"Actions","description":"Actions represent the Use Cases of the Application (i.e., the actions that can be performed by a user or software in the application).","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Controllers":{"id":"Components/Main Components Principles/Controllers","title":"Controllers","description":"Controllers are responsible for validating the request, serving the request data, and building a response. Validation and response happen in separate classes but are triggered from the Controller.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Exceptions":{"id":"Components/Main Components Principles/Exceptions","title":"Exceptions","description":"Exceptions are a form of output that should be expected (like an API exception) and well defined. They are a way to handle errors in a well-defined and expected manner.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Models":{"id":"Components/Main Components Principles/Models","title":"Models","description":"Models provide an abstraction for data and represent the data in the database. They are the M in MVC.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Requests":{"id":"Components/Main Components Principles/Requests","title":"Requests","description":"Requests mainly serve the user input in the application. They are very useful to automatically apply the Validation and Authorization rules.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Routes":{"id":"Components/Main Components Principles/Routes","title":"Routes","description":"Routes are responsible for mapping all incoming HTTP requests to their controller\'s functions. When an HTTP request hits the Application, the Endpoints match with the URL pattern and make the call to the corresponding Controller function.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Sub-Actions":{"id":"Components/Main Components Principles/Sub-Actions","title":"Sub-Actions","description":"Sub-Actions are designed to eliminate code duplication in Actions. They allow Actions to share a sequence of Tasks, while Tasks allow Actions to share a piece of functionality.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Tasks":{"id":"Components/Main Components Principles/Tasks","title":"Tasks","description":"Tasks are classes that hold shared business logic between multiple Actions across different Containers.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Transformers":{"id":"Components/Main Components Principles/Transformers","title":"Transformers","description":"Transformers, short for Response Transformers, are equivalent to Views but for JSON Responses. They take data and represent it in JSON, transforming Models into Arrays.","sidebar":"tutorialSidebar"},"Components/Main Components Principles/Views":{"id":"Components/Main Components Principles/Views","title":"Views","description":"Views contain the HTML served by your application. Their main goal is to separate the application logic from the presentation logic. They are the V in MVC.","sidebar":"tutorialSidebar"},"Components/Optional Components":{"id":"Components/Optional Components","title":"Optional Components","description":"There are several optional components that can be added to your application based on your specific needs. While not all of them may be necessary, some are highly recommended. These components include:","sidebar":"tutorialSidebar"},"Donations":{"id":"Donations","title":"Donations","description":"Thank you for your interest in Porto SAP! While I\'m the main maintainer, I\'m grateful for the contributions that help make this architecture better. If you find Porto helpful, consider supporting my work by becoming a Github Sponsor. Your support allows me to continue improving and maintaining this project. Thank you!","sidebar":"tutorialSidebar"},"Features/AI Driven Development":{"id":"Features/AI Driven Development","title":"AI-Driven Development","description":"LLMs + Porto = Harmony","sidebar":"tutorialSidebar"},"Features/Monolithic to MicroServices":{"id":"Features/Monolithic to MicroServices","title":"Monolithic to Microservices","description":"Porto is designed to scale with you! While many companies shift from Monolithic to Micro-Services (and more recently Serverless) as they scale up, Porto offers the flexibility to deflate your Monolithic into Micro-Services (or SOA) at any time with minimal effort.","sidebar":"tutorialSidebar"},"Feedback":{"id":"Feedback","title":"Feedback","description":"Your feedback is important.","sidebar":"tutorialSidebar"},"Implementations":{"id":"Implementations","title":"Implementations","description":"List of projects implementing the Porto architecture.","sidebar":"tutorialSidebar"},"Intro":{"id":"Intro","title":"Introduction","description":"The terms \\"MUST,\\" \\"MUST NOT,\\" \\"REQUIRED,\\" \\"SHALL,\\" \\"SHALL NOT,\\" \\"SHOULD,\\" \\"SHOULD NOT,\\" \\"RECOMMENDED,\\" \\"MAY,\\" and \\"OPTIONAL\\" in this document are defined as per RFC 2119.","sidebar":"tutorialSidebar"},"Layers/Containers Layer":{"id":"Layers/Containers Layer","title":"Containers Layer","description":"The Container layer is the heart of the Porto architecture. Here is where the application-specific business logic lives, including all the Application features and functionalities. You\'ll spend 90% of your time working in this layer, developing new features, and maintaining existing ones.","sidebar":"tutorialSidebar"},"Layers/Layers Overview":{"id":"Layers/Layers Overview","title":"Layers Overview","description":"Porto is composed of two layers: Containers and Ship.","sidebar":"tutorialSidebar"},"Layers/Ship Layer":{"id":"Layers/Ship Layer","title":"Ship Layer","description":"The Ship Layer, an integral aspect of Porto\'s architecture, serves as the backbone for system organization and flexibility. Divided into few areas, it empowers developers to centralize control, decouple application code, and optimize resource management, ultimately facilitating streamlined development and maintenance processes","sidebar":"tutorialSidebar"},"Quality Attributes":{"id":"Quality Attributes","title":"Quality Attributes","description":"Quality attributes are integral to Porto\'s design and implementation. They ensure the software meets the needs and expectations of its developers.","sidebar":"tutorialSidebar"}}}}')}}]);